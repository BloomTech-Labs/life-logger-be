
type Query {
  user(id: ID!): User
  event(id: ID!): Event
  allUsers: [User!]!
  info: String!
  # allEvents(last: int): [Event!]!
}

type Mutation {
  createUser(username: String!, password: String!, email: String!): User!
  updateUser(id: ID!, username: String, password: String, email: String): User!
  deleteUser(id: ID!): User!
  signup(email: String!, password: String!, username: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  createEvent(
    title: String!, description: String!,
    location: String, category: String,
  ): Event!
  # createEvent(
  #   title: String!, description: String!,
  #   location: String, category: String,
  #   createdAt: ---, startsAt: ---,
  #   endsAt:---): Event!
  # updateEvent
  # deleteEvent
}

type User {
  id: ID!
  username: String!
  password: String!
  email: String!
  events: [Event!]!
}

type Event {
  id: ID!
  title: String!
  description: String!
  category: String!
  location: Location
  createdBy: User
  createdAt: String!
  startsAt: String
  endsAt: String
}

type AuthPayload {
  token: String
  user: User
}

type Location {
  id: ID!
  latitude: Float!
  longitude: Float!
}